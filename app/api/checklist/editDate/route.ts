import { getServerSession } from "next-auth";
import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";
import OpenAI from "openai";
import { authConfig } from "@/lib/auth.config";

// Initialisation OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

interface ChecklistItemInput {
  title: string;
  description: string;
  category: string;
  offset: number;
  priority: string;
  organisateurs?: string;
  prestataires?: string;
}

export async function PATCH(req: Request) {
  const session = await getServerSession(authConfig);
  if (!session || !session.user?.id) {
    return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
  }

  const { newWeddingDate } = await req.json();
  if (!newWeddingDate) {
    return NextResponse.json({ error: "Nouvelle date manquante" }, { status: 400 });
  }

  try {
    // üîÑ 1) Met √† jour la date dans Onboarding
    const onboarding = await prisma.onboarding.update({
      where: { userId: session.user.id },
      data: { weddingDate: new Date(newWeddingDate) },
    });

    // üóëÔ∏è 2) Supprime les anciennes t√¢ches
    await prisma.checklistItem.deleteMany({
      where: { userId: session.user.id },
    });

    // üß† 3) Reg√©n√®re les t√¢ches IA avec la nouvelle date
    const prompt = `
    Tu es un expert en organisation de mariages.

    Voici les informations fournies par le couple :
    - üìÖ Date du mariage : \${onboarding.weddingDate}
    - üïäÔ∏è Type de c√©r√©monie : \${onboarding.weddingType}
    - üìç Lieu d√©j√† d√©fini : \${onboarding.locationKnown}
    - üë• Nombre d'invit√©s estim√© : \${onboarding.guestCount}
    - üí∞ Budget global : \${onboarding.budget}
    - üé® Th√®me souhait√© : \${onboarding.theme || "non pr√©cis√©"}
    - ‚ö° Priorit√©(s) : \${onboarding.urgent || "aucune"}
    - üßë‚Äçü§ù‚Äçüßë Prestataires d√©j√† trouv√©s : \${onboarding.prestataires}
    - üß† Degr√© d'organisation / accompagnement souhait√© : \${onboarding.organisateurs}

    En t‚Äôappuyant sur ces √©l√©ments, g√©n√®re une **liste de 30 √† 60 t√¢ches** d√©taill√©es qui aideront ce couple √† organiser leur mariage de fa√ßon sereine et personnalis√©e.

    ### Format attendu pour chaque t√¢che :
    {
      "title": "Titre de la t√¢che",
      "description": "Une explication claire et concr√®te, r√©dig√©e en 3 √† 4 paragraphes si n√©cessaire. Elle doit expliquer pourquoi cette t√¢che est utile, quand et comment la r√©aliser, et inclure un **conseil pratique** commen√ßant explicitement par ¬´ Mon conseil : ¬ª directement dans la description. Donne des conseils adapt√©s au contexte du couple.",
      "category": "Une cat√©gorie pertinente (ex: Lieu, Prestataires, Budget, Logistique...)",
      "offset": -12, // nombre de mois avant le mariage o√π la t√¢che doit id√©alement √™tre r√©alis√©e
      "priority": "haute" // peut √™tre "haute", "moyenne" ou "basse"
    }

    ‚ö†Ô∏è La description doit √™tre riche, concr√®te, et aller en profondeur. √âvite toute formulation g√©n√©rique ou superficielle. Raconte chaque t√¢che comme une mini-histoire : explique son importance, ses b√©n√©fices, ses impacts potentiels, et int√®gre un ¬´ Mon conseil : ‚Ä¶ ¬ª √† la fin pour aider le couple √† la mettre en ≈ìuvre facilement (sans markdown "**" etc.).

    Renvoie **uniquement** un tableau JSON **valide** avec ces objets. Aucun texte autour, juste le tableau. Pas de commentaire, pas de phrase, pas de bloc Markdown.

    ‚ö†Ô∏è Ne coupe jamais la r√©ponse en cours. R√©ponds uniquement avec un tableau JSON complet, m√™me s‚Äôil contient moins de 60 t√¢ches. N‚Äô√©cris jamais un texte non JSON autour.
    Si tu dois couper, termine correctement le tableau avec "]".

    Utilise un ton bienveillant, professionnel, et pertinent.
    `;


    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
    });

    const checklist = JSON.parse(completion.choices[0].message.content || "[]");


    const tasks = await Promise.all(
      checklist.map((item: ChecklistItemInput) => {
        const idealDate = new Date(newWeddingDate);
        idealDate.setMonth(idealDate.getMonth() + item.offset);

        return prisma.checklistItem.create({
          data: {
            userId: session.user.id,
            title: item.title,
            description: item.description,
            category: item.category,
            offset: item.offset,
            idealDate,
            priority: item.priority,
            status: "√Ä faire",
            visible: true,
            isCustom: false,
            organisateurs: item.organisateurs || "",
            prestataires: item.prestataires || "",
          },
        });
      })
    );

    return NextResponse.json({
      message: "Date de mariage mise √† jour et checklist r√©g√©n√©r√©e",
      onboarding,
      tasks,
    });
  } catch (error) {
    console.error("Erreur PATCH /checklist/editDate :", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}

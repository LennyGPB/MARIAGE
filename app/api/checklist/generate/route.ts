import { getServerSession } from "next-auth";
import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";
import OpenAI from "openai";
import { authConfig } from "@/lib/auth.config";

// üîë Initialise le client OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

interface ChecklistItemInput {
  title: string;
  description: string;
  category: string;
  offset: number;
  priority: string;
  organisateurs?: string;
  prestataires?: string;
}

export async function POST() {
  const session = await getServerSession(authConfig);

  // üîê V√©rifie que l'utilisateur est connect√©
  if (!session || !session.user?.id) {
    return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
  }

  // üì• R√©cup√®re l'onboarding utilisateur
  const onboarding = await prisma.onboarding.findUnique({
    where: { userId: session.user.id },
  });

  if (!onboarding) {
    return NextResponse.json({ error: "Onboarding manquant" }, { status: 400 });
  }

  const prompt = `
  Tu es un expert en organisation de mariages.

  Voici les informations fournies par le couple :
  - üìÖ Date du mariage : ${onboarding.weddingDate}
  - üïäÔ∏è Type de c√©r√©monie : ${onboarding.weddingType}
  - üìç Lieu d√©j√† d√©fini : ${onboarding.locationKnown}
  - üë• Nombre d'invit√©s estim√© : ${onboarding.guestCount}
  - üí∞ Budget global : ${onboarding.budget}
  - üé® Th√®me souhait√© : ${onboarding.theme || "non pr√©cis√©"}
  - ‚ö° Priorit√©(s) : ${onboarding.urgent}
  - üßë‚Äçü§ù‚Äçüßë Prestataires d√©j√† trouv√©s : ${onboarding.prestataires}
  - üß† Degr√© d'organisation / accompagnement souhait√© : ${onboarding.organisateurs}

  En t‚Äôappuyant sur ces √©l√©ments, g√©n√®re une **liste de 30 √† 60 t√¢ches** d√©taill√©es qui aideront ce couple √† organiser leur mariage de fa√ßon sereine et personnalis√©e.

  ### Format attendu pour chaque t√¢che :
  {
    "title": "Titre de la t√¢che",
    "description": "Une explication claire et concr√®te, r√©dig√©e en 1 √† 3 paragraphes si n√©cessaire. Elle doit expliquer pourquoi cette t√¢che est utile, quand et comment la r√©aliser, et inclure des conseils adapt√©s au contexte du couple.",
    "category": "Une cat√©gorie pertinente (ex: Lieu, Prestataires, Budget, Logistique...)",
    "offset": -12, // nombre de mois avant le mariage o√π la t√¢che doit id√©alement √™tre r√©alis√©e
    "priority": "haute" // peut √™tre "haute", "moyenne" ou "basse"
  }

  La description doit √™tre compl√®te : 2 √† 3 paragraphes si le sujet s‚Äôy pr√™te. Donne des conseils pratiques, des √©tapes concr√®tes, et justifie pourquoi cette t√¢che est importante. Ne reste pas g√©n√©rique ou superficiel.
  Renvoie **uniquement** un tableau JSON **valide** avec ces objets. Aucun texte autour, juste le tableau.
  Pas de commentaire, pas de phrase, pas de bloc Markdown.
  ‚ö†Ô∏è Ne coupe jamais la r√©ponse en cours. R√©ponds uniquement avec un tableau JSON complet, m√™me s‚Äôil contient moins de 60 t√¢ches. N‚Äô√©cris jamais un texte non JSON autour.
  Si tu dois couper, termine correctement le tableau avec "]".

  Utilise un ton bienveillant, professionnel, et pertinent.
  `

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo", 
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
    });

    // üîÅ Parse la r√©ponse JSON (brute, non s√©curis√©e ici)
  let checklist = []
  try {
    const content = completion.choices[0].message.content ?? ""
    if (!content.trim().startsWith("[")) throw new Error("Pas un tableau JSON")
    checklist = JSON.parse(content)
  } catch (error) {
    console.error("‚ùå Erreur de parsing JSON :", error)
    console.log("üß™ Contenu re√ßu (tronqu√©) :", completion.choices?.[0]?.message.content?.slice(0, 1000))
    throw new Error("La r√©ponse de l'IA n'√©tait pas un JSON valide.")
  }


    // üìÖ Calcule les dates id√©ales et enregistre chaque t√¢che
    const tasks = await Promise.all(
      checklist.map((item: ChecklistItemInput) => {
        const idealDate = new Date(onboarding.weddingDate);
        idealDate.setMonth(idealDate.getMonth() + item.offset);

        return prisma.checklistItem.create({
          data: {
            userId: session.user.id,
            title: item.title,
            description: item.description,
            category: item.category,
            offset: item.offset,
            idealDate,
            priority: item.priority,
            prestataires: item.prestataires || "",
            organisateurs: item.organisateurs || "",
          },
        });
      })
    );

    await prisma.user.update({
      where: { id: session.user.id },
      data: { hasChecklist: true },
    });

    return NextResponse.json({ tasks });
  } catch (error) {
    console.error("Erreur OpenAI ou DB :", error);
    return NextResponse.json({ error: "√âchec de la g√©n√©ration" }, { status: 500 });
  }
}
